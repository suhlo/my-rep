import cv2
import numpy as np
from sklearn.cluster import DBSCAN

CANNY_THRESHOLD1 = 50
CANNY_THRESHOLD2 = 150
DBSCAN_EPS = 5
DBSCAN_MIN_SAMPLES = 5

def preprocess_image(image: np.ndarray) -> np.ndarray:
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    edges = cv2.Canny(gray, CANNY_THRESHOLD1, CANNY_THRESHOLD2)
    return edges

def apply_dbscan(edges: np.ndarray) -> tuple:
    edge_coordinates = np.column_stack(np.where(edges > 0))
    db = DBSCAN(eps=DBSCAN_EPS, min_samples=DBSCAN_MIN_SAMPLES).fit(edge_coordinates)
    cluster_labels = db.labels_
    return edge_coordinates, cluster_labels

def visualize_clusters(edge_coordinates: np.ndarray, cluster_labels: np.ndarray, edges: np.ndarray) -> np.ndarray:
    output = cv2.cvtColor(edges, cv2.COLOR_GRAY2BGR)
    unique_labels = set(cluster_labels)
    colors = [tuple(np.random.randint(0, 255, 3).tolist()) for _ in unique_labels]

    for (coord, label) in zip(edge_coordinates, cluster_labels):
        if label == -1:
            color = (0, 0, 255)
        else:
            color = colors[label]
        cv2.circle(output, (coord[1], coord[0]), 1, color, -1)

    return output

def main():
    cap = cv2.VideoCapture(0)

    while True:
        ret, frame = cap.read()
        if not ret:
            break

        edges = preprocess_image(frame)
        edge_coordinates, cluster_labels = apply_dbscan(edges)
        output = visualize_clusters(edge_coordinates, cluster_labels, edges)

        cv2.imshow("DBSCAN Clustering", output)

        if cv2.waitKey(1) & 0xFF == ord("q"):
            break

    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()